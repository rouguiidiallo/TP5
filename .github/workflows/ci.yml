name: Publish Docker image and deploy to Azure VM

on:
  push:
    branches:
      - main

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub and deploy to Azure VM
    runs-on: ubuntu-latest
    steps:
      - name: Vérifier le dépôt
        uses: actions/checkout@v4
      
      - name: Connexion à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extraire les métadonnées (tags, labels) pour Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: rouguii/python-app
      
      - name: Construire et pousser l'image Docker.
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Ajouter la clé SSH de la vm-production
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploiement on Prod
        
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@172.201.227.175 << 'EOF'
            echo "Tags des images Docker : ${{ steps.meta.outputs.tags }}"
            echo "Déploiement dans l'environnement de staging..."
            echo "Hôte de la base de données : $DB_HOST"
            echo "Exécution des migrations de la base de données..."
            # Remplacez par votre commande de migration PostgreSQL
            # Par exemple, si vous utilisez Flask-Migrate avec PostgreSQL :
            # flask db upgrade
            
            # Tirer la dernière image
            docker pull rouguii/python-app:main
            docker run -d --name python-app -p 8088:8088 rouguii/python-app:main
          EOF
        
      - name: Ajouter la clé SSH de la vm-staging
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_STAGING_PRIVATE_KEY }}
      - name: deploiement sur la VM staging
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}          # Port par défaut pour PostgreSQL est 5432
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}            # Nom de la base de données.
          STAGING_ENV: true
        run: |
  
          #Connexion à la VM staging
          ssh -o StrictHostKeyChecking=no azureuser@4.180.35.17 << 'EOF'
            echo "Tags des images Docker : ${{ steps.meta.outputs.tags }}"
            echo "Déploiement dans l'environnement de staging..."
            echo "Hôte de la base de données : $DB_HOST"
            echo "Exécution des migrations de la base de données..."
            # Remplacez par votre commande de migration PostgreSQL
            # Par exemple, si vous utilisez Flask-Migrate avec PostgreSQL :
            # flask db upgrade
            
            # Tirer la dernière image
            docker pull rouguii/python-app:main
            # Exécuter le conteneur Docker avec les variables d'environnement
            docker run -d --name python-app -p 8089:8088 \
              -e DB_HOST=$DB_HOST \
              -e DB_PORT=$DB_PORT \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_NAME=$DB_NAME \
              rouguii/python-app:main
          EOF

        
        
