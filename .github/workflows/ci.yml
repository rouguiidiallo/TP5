name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Cible de déploiement (staging/production)'
        required: true
        default: 'production'
        options:
          - staging
          - production

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_target != 'production'  # Ce job ne s'exécute pas pour production manuellement
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupérer l'historique complet pour éviter les erreurs de HEAD^

      - name: Check for VERSION and Changelog.md changes
        id: changes
        run: |
          if [[ $(git diff --name-only HEAD^..HEAD | grep -E 'VERSION|Changelog.md') == "" ]]; then
            echo "VERSION or Changelog.md not changed, skipping build and deploy."
            exit 1
          fi

      - name: Read VERSION
        id: version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            rouguii/python-app:${{ env.VERSION }}
            rouguii/python-app:latest

  deploy_staging:
    name: Déployer sur la VM de staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_target == 'staging')  # S'exécute si c'est un push ou si le deploy_target est staging
    steps:
      - name: Ajouter la clé SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_STAGING_PRIVATE_KEY }}

      - name: Déployer sur la VM de staging
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          STAGING_ENV: true
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@20.199.82.209 << 'EOF'
            echo "Déploiement dans l'environnement de staging..."
            echo "Récupération de l'image Docker..."
            docker pull rouguii/python-app:${{ env.VERSION }}
            if [ "$(docker ps -q -f name=python-app-staging)" ]; then
              echo "Arrêt et suppression du conteneur existant..."
              docker stop python-app-staging
              docker rm python-app-staging
            fi
            echo "Lancement du conteneur Docker..."
            docker run -d --name python-app-staging -p 8089:8088 \
              -e DB_HOST=$DB_HOST \
              -e DB_PORT=$DB_PORT \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_NAME=$DB_NAME \
              rouguii/python-app:${{ env.VERSION }}
          EOF

  deploy_production:
    name: Déployer sur la VM de production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'production'  # Ce job s'exécute uniquement pour un déclenchement manuel en production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupérer l'historique complet pour éviter les erreurs de HEAD^

      - name: Ajouter la clé SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Déployer sur la VM de production
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@20.199.82.73 << 'EOF'
            echo "Déploiement dans l'environnement de production..."
            echo "Récupération de l'image Docker..."
            docker pull rouguii/python-app:${{ env.VERSION }}
            CONTAINER_ID=$(docker ps -aq -f name=python-app-production)
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Arrêt et suppression du conteneur existant..."
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
            fi
            echo "Lancement du conteneur Docker..."
            docker run -d --name python-app-production -p 8088:8088 \
              -e DB_HOST=$DB_HOST \
              -e DB_PORT=$DB_PORT \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_NAME=$DB_NAME \
              rouguii/python-app:${{ env.VERSION }}
          EOF
